# -*- coding: utf-8 -*-
"""topsis_assg_3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ot9N90BALkHt7Zq_uGDEpIt9TV6op2uB
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

def topsis(data, weights, impacts):
    data = np.array(data, dtype=float)
    weights = np.array(weights, dtype=float)
    impacts = np.array(impacts)

    # Normalize the data
    norm_data = data / np.sqrt((data ** 2).sum(axis=0))

    # Apply weights
    weighted_data = norm_data * weights

    # Determine ideal best and worst
    ideal_best = np.max(weighted_data, axis=0) * (impacts == '+') + np.min(weighted_data, axis=0) * (impacts == '-')
    ideal_worst = np.min(weighted_data, axis=0) * (impacts == '+') + np.max(weighted_data, axis=0) * (impacts == '-')

    # Calculate distances from ideal best and worst
    dist_best = np.sqrt(((weighted_data - ideal_best) ** 2).sum(axis=1))
    dist_worst = np.sqrt(((weighted_data - ideal_worst) ** 2).sum(axis=1))

    # Compute TOPSIS score
    topsis_score = dist_worst / (dist_best + dist_worst)

    # Rank models
    ranks = topsis_score.argsort()[::-1] + 1

    return topsis_score, ranks

# Example dataset with models and their performance metrics
models = ['BART', 'T5', 'PEGASUS', 'GPT-3.5']
data = [
    [0.45, 0.67, 0.55, 0.30],  # ROUGE-1
    [0.38, 0.60, 0.50, 0.25],  # ROUGE-2
    [0.42, 0.65, 0.58, 0.28],  # ROUGE-L
    [1.2, 1.8, 2.5, 3.0]       # Inference time (lower is better)
]
data = np.array(data).T  # Transpose to align with models

weights = [0.4, 0.3, 0.2, 0.1]  # Assign weights to criteria
impacts = np.array(['+', '+', '+', '-'])  # Higher ROUGE is better, lower time is better

# Compute TOPSIS scores and ranks
scores, ranks = topsis(data, weights, impacts)

# Create results DataFrame
result_df = pd.DataFrame({'Model': models, 'TOPSIS Score': scores, 'Rank': ranks})
result_df = result_df.sort_values(by='Rank')

# Plot the ranking results
plt.figure(figsize=(8, 5))
sns.barplot(x=result_df['Model'], y=result_df['TOPSIS Score'], palette='viridis')
plt.xlabel('Models')
plt.ylabel('TOPSIS Score')
plt.title('TOPSIS Ranking of Text Summarization Models')
plt.ylim(0, 1)
plt.show()

# Show results table
print(result_df)